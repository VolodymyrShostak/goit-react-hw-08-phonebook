{"version":3,"file":"static/js/380.7d117f8c.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/Form/Form.styled.js","redux/contacts/selectors.js","components/Form/Form.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactsList/ContactList.styled.js","components/ContactsList/ContactsList.jsx","components/Phonebook/Phonebook.styled.js","components/Phonebook/Phonebook.jsx","pages/Contacts.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\n\nexport const Title = styled.h3`\nmargin-bottom: 10px;\n`\nexport const Button = styled.button`\nmargin-left: 20px;\nborder:none;\nborder-radius: 5px;\nbackground-color: orange;\ncolor: white;\ncursor: pointer;\n\n`\nexport const Input = styled.input`\n  width: 50%;\n`;","export const selectLoading = state => state.contacts.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.contacts.items;\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { Title, Button, Input } from './Form.styled.js';\nimport {\n  selectAllContacts,\n} from '../../redux/contacts/selectors';\n\nexport  function Form() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const nameForm = e.target.elements.name.value;\n    const numberForm = e.target.elements.number.value;\n    if (\n      contacts.find(cont => cont.name.toLowerCase() === nameForm.toLowerCase())\n    ) {\n      return alert(`${nameForm} is already in contacts`);\n    }\n    dispatch(addContact({ id: nanoid(), name: nameForm, number: numberForm }));\n    form.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <Title>Name</Title>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <Title>Number</Title>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <Button type=\"submit\">Add contact</Button>\n      </form>\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Title = styled.h3`\nmargin-bottom: 10px;\nmargin-top: 0;\n`\nexport const Input = styled.input`\nwidth: 50%;\n`","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Title, Input } from './Filter.styled.js';\nimport { setFilter } from 'redux/contacts/operations';\nimport { selectFilter } from '../../redux/contacts/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Title>Find contacts by name</Title>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={({ target: { value } }) => {\n          dispatch(setFilter(value));\n        }}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </>\n  );\n};\n\n","import styled from 'styled-components';\n\n\nexport const Button = styled.button`\nmargin-left: 20px;\nborder:none;\nborder-radius: 5px;\nbackground-color: orange;\ncolor: white;\ncursor: pointer;\n\n`\nexport const Contact = styled.li`\ndisplay:flex;\njustify-content: space-between;\nmargin-bottom: 10px;\n`\nexport const ContactList = styled.ul`\npadding: 0;\n` \nexport const ContactNumber = styled.span`\n\n`","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  Button,\n  Contact,\n  ContactList,\n  ContactNumber,\n} from './ContactList.styled.js';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport {\n  selectAllContacts,\n  selectFilter,\n} from '../../redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n  const filter = useSelector(selectFilter);\n  \n  const normalizedFilter = filter.toLowerCase();\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n\n  return (\n    <ContactList>\n      {visibleContacts.map(({ id, name, number }) => (\n        <Contact key={id} id={id}>\n          {name}:\n          <div>\n          <ContactNumber type=\"number\">{number}</ContactNumber>\n          <Button\n            type=\"button\"\n            onClick={() => {\n              dispatch(deleteContact(id));\n            }}\n          >\n            Delete\n          </Button>\n        </div>\n        </Contact>\n      ))}\n    </ContactList>\n  );\n};\n\n\nContactsList.propTypes = {\n  filter: PropTypes.string.isRequired,\n   contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bool,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\n\nexport const Wrapper = styled.div`\n  padding: 50px;\n  display: flex;\n  flex-direction: column;\n  max-width: 1000px;\n  margin:  auto ;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;\n`;\n\nexport const  Title = styled.h1`\n  margin:  auto;\n  display: flex;\n  justify-content: center;\n\n `\nexport const Subtitle = styled.h2`\n  display: flex;\n  justify-content: center;\n`;\n \n\n","import { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form } from './../Form/Form';\nimport { Filter } from '../Filter/Filter';\nimport { ContactsList } from '../ContactsList/ContactsList';\nimport { Wrapper, Title, Subtitle } from './Phonebook.styled.js';\nimport {\n  addContact,\n  deleteContact,\n  fetchContacts,\n} from 'redux/contacts/operations';\nimport { selectAllContacts } from '../../redux/contacts/selectors';\n\nexport  function Phonebook() {\n  const contacts = useSelector(selectAllContacts);\n  const [filter, setFilter] = useState('');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  const onChangeFilter = e => {\n    setFilter(e.target.value);\n  };\n\n  const onAddContact = ({ name }) => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return alert(`${name} is already in contacts`);\n    }\n    dispatch(addContact());\n  };\n\n  const onDeleteContact = contId => {\n    dispatch(deleteContact(contId));\n  };\n\n  return (\n    <Wrapper>\n      <Title>Phonebook</Title>\n      <Form onSubmit={onAddContact} />\n      <Subtitle>Contacts</Subtitle>\n      <Filter\n        title=\"Find contacts by name\"\n        value={filter}\n        onChange={onChangeFilter}\n      />\n      <ContactsList\n        contacts={contacts}\n        filter={filter}\n        onDeleteContact={onDeleteContact}\n      />\n    </Wrapper>\n  );\n}\n","import { Phonebook } from 'components/Phonebook/Phonebook';\n\nexport default function Contacts() {\n  return (\n    <div>\n      \n      <Phonebook />\n    </div>\n  );\n}\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","Title","styled","Button","Input","selectFilter","state","contacts","filter","selectAllContacts","items","Form","dispatch","useDispatch","useSelector","onSubmit","e","preventDefault","form","target","nameForm","elements","name","value","numberForm","number","find","cont","toLowerCase","alert","addContact","reset","type","pattern","title","required","Filter","onChange","setFilter","Contact","ContactList","ContactNumber","ContactsList","normalizedFilter","visibleContacts","contact","includes","map","onClick","deleteContact","Wrapper","Subtitle","Phonebook","useState","useEffect","fetchContacts","onDeleteContact","contId","Contacts"],"sourceRoot":""}